#!/usr/bin/env ruby

require 'commander/import'
require 'hubtime'

program :name, 'hubtime'
program :version, Hubtime::VERSION
program :description, 'See activity on Github.'
 
command :impact do |c|
  c.syntax = 'hubtime impact'
  c.summary = ''
  c.description = 'Graph your additions and deletions'
  c.example 'description', 'command example'
  c.option '--months INTEGER', 'How many months of history'
  c.option '--user USERNAME', 'Which Github user'
  c.action do |args, options|
    options.default :months => 12
    activity = Hubtime::Activity.new(self, options.user, options.months)
    file = activity.impact
    puts "saved: #{file}"
    `open #{file}`
  end
end

command :graph do |c|
  c.syntax = 'hubtime graph [commits|impact|additions|deletions]'
  c.summary = ''
  c.description = 'Graph a single count'
  c.example 'description', 'command example'
  c.option '--months INTEGER', 'How many months of history'
  c.option '--user USERNAME', 'Which Github user'
  c.option '--stacked', 'To see data by repository'
  c.option '--users', 'To see data stacked by user'
  c.action do |args, options|
    options.default :months => 12
    options.default :data => "count"

    username = options.user
    if options.users.present?
      username = "all"
      stack = "user"
    elsif options.stacked.present?
      stack = "repo"
    else
      stack = nil
    end

    type = args.first
    type ||= "commits"
    type = "count" if type == "commits"
    activity = Hubtime::Activity.new(self, username, options.months)
    file = activity.graph(type, stack)
    puts "saved: #{file}"
    `open #{file}`
  end
end

command :pie do |c|
  c.syntax = 'hubtime pie [commits|impact|additions|deletions]'
  c.summary = ''
  c.description = 'Graph a pie chart by repository'
  c.example 'description', 'command example'
  c.option '--months INTEGER', 'How many months of history'
  c.option '--user USERNAME', 'Which Github user'
  c.option '--users', 'To see data stacked by user instead of repos'
  c.action do |args, options|
    options.default :months => 12
    type = args.first
    type ||= "commits"
    type = "count" if type == "commits"

    username = options.user
    if options.users.present?
      username = "all"
      stack = "user"
    else
      stack = nil
    end

    activity = Hubtime::Activity.new(self, username, options.months)
    file = activity.pie(type, stack)
    puts "saved: #{file}"
    `open #{file}`
  end
end

command :table do |c|
  c.syntax = 'hubtime table [options]'
  c.summary = ''
  c.description = 'Table your time'
  c.example 'description', 'command example'
  c.option '--months INTEGER', 'How many months of history'
  c.option '--user USERNAME', 'How many months of history'
  c.option '--unit (year|month|day)', 'Granularity of the results'
  c.action do |args, options|
    options.default :months => 12
    options.default :unit => "month"
    activity = Hubtime::Activity.new(self, options.user, options.months)
    puts activity.table(options.unit)
  end
end

command :spark do |c|
  c.syntax = 'hubtime spark [options]'
  c.summary = ''
  c.description = 'Graph your time'
  c.example 'description', 'command example'
  c.option '--months INTEGER', 'How many months of history'
  c.option '--user USERNAME', 'How many months of history'
  c.option '--unit (year|month|day)', 'Granularity of the results'
  c.option '--data (count|impact|additions|deletions)', 'Type of results'
  c.action do |args, options|
    options.default :months => 12
    options.default :unit => "month"
    type = args.first
    type ||= "commits"
    type = "count" if type == "commits"

    activity = Hubtime::Activity.new(self, options.user, options.months)
    puts activity.spark(options.unit, type)
  end
end

command :config do |c|
  c.syntax = 'hubtime config --user USERNAME --password PASSWORD'
  c.summary = ''
  c.description = 'Sets your details'
  c.example 'description', 'command example'
  c.option '--user USERNAME', 'Github user name'
  c.option '--password PASSWORD', 'Github password'
  c.action do |args, options|
    if options.password || options.user
      raise("Need password") unless options.password
      raise("Need github user name") unless options.user
      Hubtime::HubConfig.store(options.user, options.password)
      puts "Set config..."
    else
      puts "Current config..."
    end

    puts "  Username: #{Hubtime::HubConfig.user}"
    puts "  Password: #{Hubtime::HubConfig.display_password}"

    unless options.password || options.user
      puts "To set, use command: hubtime config --user USERNAME --password PASSWORD" 
    end

    puts ""
  end
end

command :auth do |c|
  c.syntax = 'hubtime auth'
  c.summary = ''
  c.description = 'Saves credentials'
  c.action do |args, options|
    username = ask("Github Username: ")
    password = ask("Github Password: ") { |q| q.echo = "*" }

    raise "Need a username" if username.blank?
    raise "Need a password" if password.blank?

    Hubtime::HubConfig.auth(username, password)

    puts "Current auth..."

    puts "  Username: #{Hubtime::HubConfig.user}"
    puts "  Password: #{Hubtime::HubConfig.display_password}"

    unless options.password || options.user
      puts "To set directly, use command: hubtime config --user USERNAME --password PASSWORD" 
    end

    puts ""
  end
end

command :ignore do |c|
  c.syntax = 'hubtime ignore REPO_NAME'
  c.summary = ''
  c.description = 'Stop looking at this repo'
  c.example 'description', 'hubtime ignore bleonard/rails'
  c.action do |args, options|
    if args.first
      Hubtime::HubConfig.add_ignore(args.first)
      Hubtime::Cacher.clear("activity")  # different repos
      Hubtime::Cacher.clear("charts")
    end

    puts "Current ignore list: #{Hubtime::HubConfig.ignore.join(", ")}"
    puts "This list can be edited in the config.yml"
  end
end

command :clear do |c|
  c.syntax = 'hubtime clear'
  c.summary = ''
  c.description = 'Removes items from the cache'
  c.example 'description', 'hubtime clear activity'
  c.action do |args, options|
    args << "activity" if args.size == 0
    args.each do |item|
      Hubtime::Cacher.clear(item)
    end
  end
end

command :repositories do |c|
  c.syntax = 'hubtime repositories'
  c.description = 'Lists known repositories'
  c.option '--user USERNAME', 'Github user name'
  c.action do |args, options|
    user = options.user
    user ||= Hubtime::HubConfig.user
    Hubtime::GithubService.owner.repositories(user).each do |name|
      puts name
    end
  end
end


command :poll do |c|
  c.syntax = 'hubtime poll'
  c.summary = ''
  c.description = 'fetches every so foten until it is done'
  c.example 'description', 'command example'
  c.option '--months INTEGER', 'How many months of history'
  c.option '--user USERNAME', 'Which Github user'
  c.option '--sleep MINUTES', 'Sleep between tries'
  c.action do |args, options|
    options.default :months => 12
    options.default :sleep  => 61
    working = true
    while(working)
      begin
        activity = Hubtime::Activity.new(self, options.user, options.months)
        activity.compile!
        working = false
      rescue Exception => e
        puts e.message
        seconds = options.sleep*60
        puts "Sleeping #{seconds}..."
        seconds.times do
          sleep(1)
        end
        working = true
      end
    end
  end
end
